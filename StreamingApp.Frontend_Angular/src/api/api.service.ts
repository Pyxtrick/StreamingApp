//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class DataContollerClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAllCommands(): Observable<CommandRespose> {
        let url_ = this.baseUrl + "/api/DataContoller/Commands";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllCommands(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllCommands(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CommandRespose>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CommandRespose>;
        }));
    }

    protected processGetAllCommands(response: HttpResponseBase): Observable<CommandRespose> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CommandRespose.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateCommands(commandAndResponses: CommandAndResponseDto[]): Observable<CommandRespose> {
        let url_ = this.baseUrl + "/api/DataContoller/Commands";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(commandAndResponses);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateCommands(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateCommands(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CommandRespose>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CommandRespose>;
        }));
    }

    protected processUpdateCommands(response: HttpResponseBase): Observable<CommandRespose> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CommandRespose.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteCommands(commandAndResponses: CommandAndResponseDto[]): Observable<CommandRespose> {
        let url_ = this.baseUrl + "/api/DataContoller/Commands";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(commandAndResponses);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteCommands(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteCommands(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CommandRespose>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CommandRespose>;
        }));
    }

    protected processDeleteCommands(response: HttpResponseBase): Observable<CommandRespose> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CommandRespose.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllStreams(): Observable<StreamRespose> {
        let url_ = this.baseUrl + "/api/DataContoller/Streams";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllStreams(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllStreams(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<StreamRespose>;
                }
            } else
                return _observableThrow(response_) as any as Observable<StreamRespose>;
        }));
    }

    protected processGetAllStreams(response: HttpResponseBase): Observable<StreamRespose> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StreamRespose.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllGameInfos(): Observable<GameInfoRespose> {
        let url_ = this.baseUrl + "/api/DataContoller/GameInfos";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllGameInfos(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllGameInfos(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GameInfoRespose>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GameInfoRespose>;
        }));
    }

    protected processGetAllGameInfos(response: HttpResponseBase): Observable<GameInfoRespose> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GameInfoRespose.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateGameInfos(gameInfoDtos: GameInfoDto[]): Observable<GameInfoRespose> {
        let url_ = this.baseUrl + "/api/DataContoller/GameInfos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(gameInfoDtos);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateGameInfos(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateGameInfos(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GameInfoRespose>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GameInfoRespose>;
        }));
    }

    protected processUpdateGameInfos(response: HttpResponseBase): Observable<GameInfoRespose> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GameInfoRespose.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteGameInfos(gameInfoDtos: GameInfoDto[]): Observable<GameInfoRespose> {
        let url_ = this.baseUrl + "/api/DataContoller/GameInfos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(gameInfoDtos);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteGameInfos(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteGameInfos(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GameInfoRespose>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GameInfoRespose>;
        }));
    }

    protected processDeleteGameInfos(response: HttpResponseBase): Observable<GameInfoRespose> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GameInfoRespose.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllspecialWords(): Observable<SpecialWordRespose> {
        let url_ = this.baseUrl + "/api/DataContoller/SpecialWords";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllspecialWords(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllspecialWords(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SpecialWordRespose>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SpecialWordRespose>;
        }));
    }

    protected processGetAllspecialWords(response: HttpResponseBase): Observable<SpecialWordRespose> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SpecialWordRespose.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updatespecialWords(commandAndResponses: SpecialWordDto[]): Observable<SpecialWordRespose> {
        let url_ = this.baseUrl + "/api/DataContoller/SpecialWords";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(commandAndResponses);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdatespecialWords(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdatespecialWords(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SpecialWordRespose>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SpecialWordRespose>;
        }));
    }

    protected processUpdatespecialWords(response: HttpResponseBase): Observable<SpecialWordRespose> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SpecialWordRespose.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deletespecialWords(commandAndResponses: SpecialWordDto[]): Observable<SpecialWordRespose> {
        let url_ = this.baseUrl + "/api/DataContoller/SpecialWords";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(commandAndResponses);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeletespecialWords(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeletespecialWords(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SpecialWordRespose>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SpecialWordRespose>;
        }));
    }

    protected processDeletespecialWords(response: HttpResponseBase): Observable<SpecialWordRespose> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SpecialWordRespose.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class StreamClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    startOrEndStream(): Observable<void> {
        let url_ = this.baseUrl + "/api/Stream/StartOrEndStream";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processStartOrEndStream(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processStartOrEndStream(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processStartOrEndStream(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    changeCategory(): Observable<void> {
        let url_ = this.baseUrl + "/api/Stream/ChangeCategory";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangeCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangeCategory(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processChangeCategory(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class TestClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    testLogic(): Observable<void> {
        let url_ = this.baseUrl + "/api/Test/sendChatDto";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTestLogic(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTestLogic(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processTestLogic(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    addDataToCache(): Observable<void> {
        let url_ = this.baseUrl + "/api/Test/AddTochache";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddDataToCache(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddDataToCache(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAddDataToCache(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getChachedData(): Observable<void> {
        let url_ = this.baseUrl + "/api/Test/GetCacheData";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetChachedData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetChachedData(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processGetChachedData(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteMessage(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Test/DeleteMessage?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteMessage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMessage(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteMessage(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class TwitchClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    startTwitchRequest(): Observable<void> {
        let url_ = this.baseUrl + "/api/Twitch/StartTwichConnection";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processStartTwitchRequest(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processStartTwitchRequest(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processStartTwitchRequest(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class CommandRespose implements ICommandRespose {
    commandAndResponses!: CommandAndResponseDto[];
    isSucsess!: boolean;

    constructor(data?: ICommandRespose) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.commandAndResponses = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["commandAndResponses"])) {
                this.commandAndResponses = [] as any;
                for (let item of _data["commandAndResponses"])
                    this.commandAndResponses!.push(CommandAndResponseDto.fromJS(item));
            }
            else {
                this.commandAndResponses = <any>null;
            }
            this.isSucsess = _data["isSucsess"] !== undefined ? _data["isSucsess"] : <any>null;
        }
    }

    static fromJS(data: any): CommandRespose {
        data = typeof data === 'object' ? data : {};
        let result = new CommandRespose();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.commandAndResponses)) {
            data["commandAndResponses"] = [];
            for (let item of this.commandAndResponses)
                data["commandAndResponses"].push(item.toJSON());
        }
        data["isSucsess"] = this.isSucsess !== undefined ? this.isSucsess : <any>null;
        return data;
    }
}

export interface ICommandRespose {
    commandAndResponses: CommandAndResponseDto[];
    isSucsess: boolean;
}

export class CommandAndResponseDto implements ICommandAndResponseDto {
    id!: number;
    command!: string;
    response!: string;
    description!: string;
    active!: boolean;
    auth!: AuthEnum;
    category!: CategoryEnum;

    constructor(data?: ICommandAndResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.command = _data["command"] !== undefined ? _data["command"] : <any>null;
            this.response = _data["response"] !== undefined ? _data["response"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.active = _data["active"] !== undefined ? _data["active"] : <any>null;
            this.auth = _data["auth"] !== undefined ? _data["auth"] : <any>null;
            this.category = _data["category"] !== undefined ? _data["category"] : <any>null;
        }
    }

    static fromJS(data: any): CommandAndResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new CommandAndResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["command"] = this.command !== undefined ? this.command : <any>null;
        data["response"] = this.response !== undefined ? this.response : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["active"] = this.active !== undefined ? this.active : <any>null;
        data["auth"] = this.auth !== undefined ? this.auth : <any>null;
        data["category"] = this.category !== undefined ? this.category : <any>null;
        return data;
    }
}

export interface ICommandAndResponseDto {
    id: number;
    command: string;
    response: string;
    description: string;
    active: boolean;
    auth: AuthEnum;
    category: CategoryEnum;
}

export enum AuthEnum {
    Streamer = 1,
    Mod = 2,
    Staff = 3,
    Vip = 4,
    Partner = 5,
    Subscriber = 6,
    Prime = 7,
    Turbo = 8,
    Raider = 9,
    Undefined = 10,
}

export enum CategoryEnum {
    Undefined = 0,
    Queue = 1,
    Game = 2,
    Song = 3,
    StreamUpdate = 4,
    Fun = 5,
    Subathon = 6,
    Logic = 7,
    Basic = 8,
}

export class StreamRespose implements IStreamRespose {
    streams!: StreamDto[];
    isSucsess!: boolean;

    constructor(data?: IStreamRespose) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.streams = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["streams"])) {
                this.streams = [] as any;
                for (let item of _data["streams"])
                    this.streams!.push(StreamDto.fromJS(item));
            }
            else {
                this.streams = <any>null;
            }
            this.isSucsess = _data["isSucsess"] !== undefined ? _data["isSucsess"] : <any>null;
        }
    }

    static fromJS(data: any): StreamRespose {
        data = typeof data === 'object' ? data : {};
        let result = new StreamRespose();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.streams)) {
            data["streams"] = [];
            for (let item of this.streams)
                data["streams"].push(item.toJSON());
        }
        data["isSucsess"] = this.isSucsess !== undefined ? this.isSucsess : <any>null;
        return data;
    }
}

export interface IStreamRespose {
    streams: StreamDto[];
    isSucsess: boolean;
}

export class StreamDto implements IStreamDto {
    id!: number;
    streamTitle!: string;
    streamStart!: Date;
    streamEnd!: Date;
    gameHistoryDtos!: GameHistoryDto[];

    constructor(data?: IStreamDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.gameHistoryDtos = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.streamTitle = _data["streamTitle"] !== undefined ? _data["streamTitle"] : <any>null;
            this.streamStart = _data["streamStart"] ? new Date(_data["streamStart"].toString()) : <any>null;
            this.streamEnd = _data["streamEnd"] ? new Date(_data["streamEnd"].toString()) : <any>null;
            if (Array.isArray(_data["gameHistoryDtos"])) {
                this.gameHistoryDtos = [] as any;
                for (let item of _data["gameHistoryDtos"])
                    this.gameHistoryDtos!.push(GameHistoryDto.fromJS(item));
            }
            else {
                this.gameHistoryDtos = <any>null;
            }
        }
    }

    static fromJS(data: any): StreamDto {
        data = typeof data === 'object' ? data : {};
        let result = new StreamDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["streamTitle"] = this.streamTitle !== undefined ? this.streamTitle : <any>null;
        data["streamStart"] = this.streamStart ? this.streamStart.toISOString() : <any>null;
        data["streamEnd"] = this.streamEnd ? this.streamEnd.toISOString() : <any>null;
        if (Array.isArray(this.gameHistoryDtos)) {
            data["gameHistoryDtos"] = [];
            for (let item of this.gameHistoryDtos)
                data["gameHistoryDtos"].push(item.toJSON());
        }
        return data;
    }
}

export interface IStreamDto {
    id: number;
    streamTitle: string;
    streamStart: Date;
    streamEnd: Date;
    gameHistoryDtos: GameHistoryDto[];
}

export class GameInfoDto implements IGameInfoDto {
    id!: number;
    game!: string;
    message!: string;
    gameCategory!: GameCategoryEnum;

    constructor(data?: IGameInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.game = _data["game"] !== undefined ? _data["game"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.gameCategory = _data["gameCategory"] !== undefined ? _data["gameCategory"] : <any>null;
        }
    }

    static fromJS(data: any): GameInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new GameInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["game"] = this.game !== undefined ? this.game : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["gameCategory"] = this.gameCategory !== undefined ? this.gameCategory : <any>null;
        return data;
    }
}

export interface IGameInfoDto {
    id: number;
    game: string;
    message: string;
    gameCategory: GameCategoryEnum;
}

export class GameHistoryDto extends GameInfoDto implements IGameHistoryDto {
    startDate?: Date | null;
    endDate?: Date | null;

    constructor(data?: IGameHistoryDto) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>null;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>null;
        }
    }

    static override fromJS(data: any): GameHistoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GameHistoryDto();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export interface IGameHistoryDto extends IGameInfoDto {
    startDate?: Date | null;
    endDate?: Date | null;
}

export enum GameCategoryEnum {
    Info = 0,
    ModPack = 1,
    Server = 2,
    Progress = 3,
}

export class GameInfoRespose implements IGameInfoRespose {
    gameInfos!: GameInfoDto[];
    isSucsess!: boolean;

    constructor(data?: IGameInfoRespose) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.gameInfos = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["gameInfos"])) {
                this.gameInfos = [] as any;
                for (let item of _data["gameInfos"])
                    this.gameInfos!.push(GameInfoDto.fromJS(item));
            }
            else {
                this.gameInfos = <any>null;
            }
            this.isSucsess = _data["isSucsess"] !== undefined ? _data["isSucsess"] : <any>null;
        }
    }

    static fromJS(data: any): GameInfoRespose {
        data = typeof data === 'object' ? data : {};
        let result = new GameInfoRespose();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.gameInfos)) {
            data["gameInfos"] = [];
            for (let item of this.gameInfos)
                data["gameInfos"].push(item.toJSON());
        }
        data["isSucsess"] = this.isSucsess !== undefined ? this.isSucsess : <any>null;
        return data;
    }
}

export interface IGameInfoRespose {
    gameInfos: GameInfoDto[];
    isSucsess: boolean;
}

export class SpecialWordRespose implements ISpecialWordRespose {
    sw!: SpecialWordDto[];
    isSucsess!: boolean;

    constructor(data?: ISpecialWordRespose) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.sw = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["sw"])) {
                this.sw = [] as any;
                for (let item of _data["sw"])
                    this.sw!.push(SpecialWordDto.fromJS(item));
            }
            else {
                this.sw = <any>null;
            }
            this.isSucsess = _data["isSucsess"] !== undefined ? _data["isSucsess"] : <any>null;
        }
    }

    static fromJS(data: any): SpecialWordRespose {
        data = typeof data === 'object' ? data : {};
        let result = new SpecialWordRespose();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.sw)) {
            data["sw"] = [];
            for (let item of this.sw)
                data["sw"].push(item.toJSON());
        }
        data["isSucsess"] = this.isSucsess !== undefined ? this.isSucsess : <any>null;
        return data;
    }
}

export interface ISpecialWordRespose {
    sw: SpecialWordDto[];
    isSucsess: boolean;
}

export class SpecialWordDto implements ISpecialWordDto {
    id!: number;
    name!: string;
    comment!: string;
    type!: SpecialWordEnum;
    timesUsed!: number;

    constructor(data?: ISpecialWordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.comment = _data["comment"] !== undefined ? _data["comment"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.timesUsed = _data["timesUsed"] !== undefined ? _data["timesUsed"] : <any>null;
        }
    }

    static fromJS(data: any): SpecialWordDto {
        data = typeof data === 'object' ? data : {};
        let result = new SpecialWordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["comment"] = this.comment !== undefined ? this.comment : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["timesUsed"] = this.timesUsed !== undefined ? this.timesUsed : <any>null;
        return data;
    }
}

export interface ISpecialWordDto {
    id: number;
    name: string;
    comment: string;
    type: SpecialWordEnum;
    timesUsed: number;
}

export enum SpecialWordEnum {
    None = 0,
    Delete = 1,
    Timeout = 2,
    Replace = 3,
    Banned = 4,
    Allowed = 5,
    Count = 6,
    Special = 7,
    Keyword = 8,
    Spam = 9,
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}