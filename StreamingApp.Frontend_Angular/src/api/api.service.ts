//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class DataContollerClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAllCommands(): Observable<CommandRespose> {
        let url_ = this.baseUrl + "/api/DataContoller/Commands";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllCommands(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllCommands(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CommandRespose>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CommandRespose>;
        }));
    }

    protected processGetAllCommands(response: HttpResponseBase): Observable<CommandRespose> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CommandRespose.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateCommands(commandAndResponses: CommandAndResponseDto[]): Observable<CommandRespose> {
        let url_ = this.baseUrl + "/api/DataContoller/Commands";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(commandAndResponses);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateCommands(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateCommands(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CommandRespose>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CommandRespose>;
        }));
    }

    protected processUpdateCommands(response: HttpResponseBase): Observable<CommandRespose> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CommandRespose.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteCommands(commandAndResponses: CommandAndResponseDto[]): Observable<CommandRespose> {
        let url_ = this.baseUrl + "/api/DataContoller/Commands";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(commandAndResponses);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteCommands(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteCommands(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CommandRespose>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CommandRespose>;
        }));
    }

    protected processDeleteCommands(response: HttpResponseBase): Observable<CommandRespose> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CommandRespose.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllGameInfos(): Observable<GameInfoRespose> {
        let url_ = this.baseUrl + "/api/DataContoller/GameInfos";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllGameInfos(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllGameInfos(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GameInfoRespose>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GameInfoRespose>;
        }));
    }

    protected processGetAllGameInfos(response: HttpResponseBase): Observable<GameInfoRespose> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GameInfoRespose.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateGameInfos(gameInfoDtos: GameInfoDto[]): Observable<GameInfoRespose> {
        let url_ = this.baseUrl + "/api/DataContoller/GameInfos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(gameInfoDtos);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateGameInfos(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateGameInfos(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GameInfoRespose>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GameInfoRespose>;
        }));
    }

    protected processUpdateGameInfos(response: HttpResponseBase): Observable<GameInfoRespose> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GameInfoRespose.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteGameInfos(gameInfoDtos: GameInfoDto[]): Observable<GameInfoRespose> {
        let url_ = this.baseUrl + "/api/DataContoller/GameInfos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(gameInfoDtos);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteGameInfos(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteGameInfos(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GameInfoRespose>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GameInfoRespose>;
        }));
    }

    protected processDeleteGameInfos(response: HttpResponseBase): Observable<GameInfoRespose> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GameInfoRespose.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllSettings(): Observable<SettingsRespose> {
        let url_ = this.baseUrl + "/api/DataContoller/Settings";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllSettings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllSettings(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SettingsRespose>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SettingsRespose>;
        }));
    }

    protected processGetAllSettings(response: HttpResponseBase): Observable<SettingsRespose> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SettingsRespose.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateGameInfos2(settingsDtos: SettingsDto): Observable<SettingsRespose> {
        let url_ = this.baseUrl + "/api/DataContoller/Settings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(settingsDtos);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateGameInfos2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateGameInfos2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SettingsRespose>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SettingsRespose>;
        }));
    }

    protected processUpdateGameInfos2(response: HttpResponseBase): Observable<SettingsRespose> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SettingsRespose.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllspecialWords(): Observable<SpecialWordRespose> {
        let url_ = this.baseUrl + "/api/DataContoller/SpecialWords";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllspecialWords(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllspecialWords(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SpecialWordRespose>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SpecialWordRespose>;
        }));
    }

    protected processGetAllspecialWords(response: HttpResponseBase): Observable<SpecialWordRespose> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SpecialWordRespose.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updatespecialWords(commandAndResponses: SpecialWordDto[]): Observable<SpecialWordRespose> {
        let url_ = this.baseUrl + "/api/DataContoller/SpecialWords";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(commandAndResponses);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdatespecialWords(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdatespecialWords(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SpecialWordRespose>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SpecialWordRespose>;
        }));
    }

    protected processUpdatespecialWords(response: HttpResponseBase): Observable<SpecialWordRespose> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SpecialWordRespose.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deletespecialWords(commandAndResponses: SpecialWordDto[]): Observable<SpecialWordRespose> {
        let url_ = this.baseUrl + "/api/DataContoller/SpecialWords";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(commandAndResponses);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeletespecialWords(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeletespecialWords(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SpecialWordRespose>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SpecialWordRespose>;
        }));
    }

    protected processDeletespecialWords(response: HttpResponseBase): Observable<SpecialWordRespose> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SpecialWordRespose.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllStreams(): Observable<StreamRespose> {
        let url_ = this.baseUrl + "/api/DataContoller/Streams";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllStreams(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllStreams(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<StreamRespose>;
                }
            } else
                return _observableThrow(response_) as any as Observable<StreamRespose>;
        }));
    }

    protected processGetAllStreams(response: HttpResponseBase): Observable<StreamRespose> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StreamRespose.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllUsers(): Observable<UserRespose> {
        let url_ = this.baseUrl + "/api/DataContoller/Users";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllUsers(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserRespose>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserRespose>;
        }));
    }

    protected processGetAllUsers(response: HttpResponseBase): Observable<UserRespose> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserRespose.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class StreamClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    startStream(): Observable<void> {
        let url_ = this.baseUrl + "/api/Stream/StartStream";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processStartStream(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processStartStream(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processStartStream(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    endStream(): Observable<void> {
        let url_ = this.baseUrl + "/api/Stream/EndStream";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEndStream(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEndStream(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEndStream(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    changeCategory(): Observable<void> {
        let url_ = this.baseUrl + "/api/Stream/ChangeCategory";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangeCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangeCategory(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processChangeCategory(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class StreamerBotContollerClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    testing(user: string | undefined, text: string | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/StreamerBotContoller/StreamerBot?";
        if (user === null)
            throw new Error("The parameter 'user' cannot be null.");
        else if (user !== undefined)
            url_ += "user=" + encodeURIComponent("" + user) + "&";
        if (text === null)
            throw new Error("The parameter 'text' cannot be null.");
        else if (text !== undefined)
            url_ += "text=" + encodeURIComponent("" + text) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTesting(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTesting(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processTesting(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getActions(): Observable<Actions[]> {
        let url_ = this.baseUrl + "/api/StreamerBotContoller/GetActions";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetActions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetActions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Actions[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Actions[]>;
        }));
    }

    protected processGetActions(response: HttpResponseBase): Observable<Actions[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Actions.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class TestClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    testLogic(): Observable<void> {
        let url_ = this.baseUrl + "/api/Test/sendChatDto";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTestLogic(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTestLogic(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processTestLogic(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    addDataToCache(): Observable<void> {
        let url_ = this.baseUrl + "/api/Test/AddToChache";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddDataToCache(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddDataToCache(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAddDataToCache(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getChachedData(): Observable<CacheResponse> {
        let url_ = this.baseUrl + "/api/Test/GetCacheData";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetChachedData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetChachedData(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CacheResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CacheResponse>;
        }));
    }

    protected processGetChachedData(response: HttpResponseBase): Observable<CacheResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CacheResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteMessage(messageId: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Test/DeleteMessage?";
        if (messageId === null)
            throw new Error("The parameter 'messageId' cannot be null.");
        else if (messageId !== undefined)
            url_ += "messageId=" + encodeURIComponent("" + messageId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteMessage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMessage(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteMessage(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    sendToClient(): Observable<void> {
        let url_ = this.baseUrl + "/api/Test/SendToClient";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendToClient(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendToClient(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSendToClient(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getStreamAchievements(): Observable<void> {
        let url_ = this.baseUrl + "/api/Test/StreamAchievements";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStreamAchievements(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStreamAchievements(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processGetStreamAchievements(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class TwitchClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    startTwitchRequest(): Observable<void> {
        let url_ = this.baseUrl + "/api/Twitch/StartTwichConnection";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processStartTwitchRequest(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processStartTwitchRequest(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processStartTwitchRequest(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class CommandRespose implements ICommandRespose {
    commandAndResponses!: CommandAndResponseDto[];
    isSucsess!: boolean;

    constructor(data?: ICommandRespose) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.commandAndResponses = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["commandAndResponses"])) {
                this.commandAndResponses = [] as any;
                for (let item of _data["commandAndResponses"])
                    this.commandAndResponses!.push(CommandAndResponseDto.fromJS(item));
            }
            else {
                this.commandAndResponses = <any>null;
            }
            this.isSucsess = _data["isSucsess"] !== undefined ? _data["isSucsess"] : <any>null;
        }
    }

    static fromJS(data: any): CommandRespose {
        data = typeof data === 'object' ? data : {};
        let result = new CommandRespose();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.commandAndResponses)) {
            data["commandAndResponses"] = [];
            for (let item of this.commandAndResponses)
                data["commandAndResponses"].push(item.toJSON());
        }
        data["isSucsess"] = this.isSucsess !== undefined ? this.isSucsess : <any>null;
        return data;
    }
}

export interface ICommandRespose {
    commandAndResponses: CommandAndResponseDto[];
    isSucsess: boolean;
}

export class CommandAndResponseDto implements ICommandAndResponseDto {
    id!: number;
    command!: string;
    response!: string;
    description!: string;
    active!: boolean;
    auth!: AuthEnum;
    category!: CategoryEnum;

    constructor(data?: ICommandAndResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.command = _data["command"] !== undefined ? _data["command"] : <any>null;
            this.response = _data["response"] !== undefined ? _data["response"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.active = _data["active"] !== undefined ? _data["active"] : <any>null;
            this.auth = _data["auth"] !== undefined ? _data["auth"] : <any>null;
            this.category = _data["category"] !== undefined ? _data["category"] : <any>null;
        }
    }

    static fromJS(data: any): CommandAndResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new CommandAndResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["command"] = this.command !== undefined ? this.command : <any>null;
        data["response"] = this.response !== undefined ? this.response : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["active"] = this.active !== undefined ? this.active : <any>null;
        data["auth"] = this.auth !== undefined ? this.auth : <any>null;
        data["category"] = this.category !== undefined ? this.category : <any>null;
        return data;
    }
}

export interface ICommandAndResponseDto {
    id: number;
    command: string;
    response: string;
    description: string;
    active: boolean;
    auth: AuthEnum;
    category: CategoryEnum;
}

export enum AuthEnum {
    Streamer = 1,
    Mod = 2,
    Staff = 3,
    Vip = 4,
    Partner = 5,
    Subscriber = 6,
    Prime = 7,
    Turbo = 8,
    Raider = 9,
    Undefined = 10,
}

export enum CategoryEnum {
    Undefined = 0,
    Queue = 1,
    Game = 2,
    Song = 3,
    StreamUpdate = 4,
    Fun = 5,
    Subathon = 6,
    Logic = 7,
    Basic = 8,
}

export class GameInfoRespose implements IGameInfoRespose {
    gameInfos!: GameInfoDto[];
    isSucsess!: boolean;

    constructor(data?: IGameInfoRespose) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.gameInfos = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["gameInfos"])) {
                this.gameInfos = [] as any;
                for (let item of _data["gameInfos"])
                    this.gameInfos!.push(GameInfoDto.fromJS(item));
            }
            else {
                this.gameInfos = <any>null;
            }
            this.isSucsess = _data["isSucsess"] !== undefined ? _data["isSucsess"] : <any>null;
        }
    }

    static fromJS(data: any): GameInfoRespose {
        data = typeof data === 'object' ? data : {};
        let result = new GameInfoRespose();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.gameInfos)) {
            data["gameInfos"] = [];
            for (let item of this.gameInfos)
                data["gameInfos"].push(item.toJSON());
        }
        data["isSucsess"] = this.isSucsess !== undefined ? this.isSucsess : <any>null;
        return data;
    }
}

export interface IGameInfoRespose {
    gameInfos: GameInfoDto[];
    isSucsess: boolean;
}

export class GameInfoDto implements IGameInfoDto {
    id!: number;
    game!: string;
    message!: string;
    gameCategory!: GameCategoryEnum;

    constructor(data?: IGameInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.game = _data["game"] !== undefined ? _data["game"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.gameCategory = _data["gameCategory"] !== undefined ? _data["gameCategory"] : <any>null;
        }
    }

    static fromJS(data: any): GameInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new GameInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["game"] = this.game !== undefined ? this.game : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["gameCategory"] = this.gameCategory !== undefined ? this.gameCategory : <any>null;
        return data;
    }
}

export interface IGameInfoDto {
    id: number;
    game: string;
    message: string;
    gameCategory: GameCategoryEnum;
}

export enum GameCategoryEnum {
    Info = 0,
    ModPack = 1,
    Server = 2,
    Progress = 3,
}

export class SettingsRespose implements ISettingsRespose {
    settings!: SettingsDto[];
    isSucsess!: boolean;

    constructor(data?: ISettingsRespose) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.settings = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["settings"])) {
                this.settings = [] as any;
                for (let item of _data["settings"])
                    this.settings!.push(SettingsDto.fromJS(item));
            }
            else {
                this.settings = <any>null;
            }
            this.isSucsess = _data["isSucsess"] !== undefined ? _data["isSucsess"] : <any>null;
        }
    }

    static fromJS(data: any): SettingsRespose {
        data = typeof data === 'object' ? data : {};
        let result = new SettingsRespose();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.settings)) {
            data["settings"] = [];
            for (let item of this.settings)
                data["settings"].push(item.toJSON());
        }
        data["isSucsess"] = this.isSucsess !== undefined ? this.isSucsess : <any>null;
        return data;
    }
}

export interface ISettingsRespose {
    settings: SettingsDto[];
    isSucsess: boolean;
}

export class SettingsDto implements ISettingsDto {
    id!: number;
    origin!: ChatOriginEnum;
    allChat!: AuthEnum;
    muteAllerts!: boolean;
    muteChatMessages!: boolean;
    comunityDayActive!: boolean;
    delay!: string;
    allertDelayS!: number;
    timeOutSeconds!: number;
    spamAmmount!: number;

    constructor(data?: ISettingsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.origin = _data["origin"] !== undefined ? _data["origin"] : <any>null;
            this.allChat = _data["allChat"] !== undefined ? _data["allChat"] : <any>null;
            this.muteAllerts = _data["muteAllerts"] !== undefined ? _data["muteAllerts"] : <any>null;
            this.muteChatMessages = _data["muteChatMessages"] !== undefined ? _data["muteChatMessages"] : <any>null;
            this.comunityDayActive = _data["comunityDayActive"] !== undefined ? _data["comunityDayActive"] : <any>null;
            this.delay = _data["delay"] !== undefined ? _data["delay"] : <any>null;
            this.allertDelayS = _data["allertDelayS"] !== undefined ? _data["allertDelayS"] : <any>null;
            this.timeOutSeconds = _data["timeOutSeconds"] !== undefined ? _data["timeOutSeconds"] : <any>null;
            this.spamAmmount = _data["spamAmmount"] !== undefined ? _data["spamAmmount"] : <any>null;
        }
    }

    static fromJS(data: any): SettingsDto {
        data = typeof data === 'object' ? data : {};
        let result = new SettingsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["origin"] = this.origin !== undefined ? this.origin : <any>null;
        data["allChat"] = this.allChat !== undefined ? this.allChat : <any>null;
        data["muteAllerts"] = this.muteAllerts !== undefined ? this.muteAllerts : <any>null;
        data["muteChatMessages"] = this.muteChatMessages !== undefined ? this.muteChatMessages : <any>null;
        data["comunityDayActive"] = this.comunityDayActive !== undefined ? this.comunityDayActive : <any>null;
        data["delay"] = this.delay !== undefined ? this.delay : <any>null;
        data["allertDelayS"] = this.allertDelayS !== undefined ? this.allertDelayS : <any>null;
        data["timeOutSeconds"] = this.timeOutSeconds !== undefined ? this.timeOutSeconds : <any>null;
        data["spamAmmount"] = this.spamAmmount !== undefined ? this.spamAmmount : <any>null;
        return data;
    }
}

export interface ISettingsDto {
    id: number;
    origin: ChatOriginEnum;
    allChat: AuthEnum;
    muteAllerts: boolean;
    muteChatMessages: boolean;
    comunityDayActive: boolean;
    delay: string;
    allertDelayS: number;
    timeOutSeconds: number;
    spamAmmount: number;
}

export enum ChatOriginEnum {
    Twtich = 0,
    Youtube = 1,
    Undefined = 2,
}

export class SpecialWordRespose implements ISpecialWordRespose {
    sw!: SpecialWordDto[];
    isSucsess!: boolean;

    constructor(data?: ISpecialWordRespose) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.sw = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["sw"])) {
                this.sw = [] as any;
                for (let item of _data["sw"])
                    this.sw!.push(SpecialWordDto.fromJS(item));
            }
            else {
                this.sw = <any>null;
            }
            this.isSucsess = _data["isSucsess"] !== undefined ? _data["isSucsess"] : <any>null;
        }
    }

    static fromJS(data: any): SpecialWordRespose {
        data = typeof data === 'object' ? data : {};
        let result = new SpecialWordRespose();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.sw)) {
            data["sw"] = [];
            for (let item of this.sw)
                data["sw"].push(item.toJSON());
        }
        data["isSucsess"] = this.isSucsess !== undefined ? this.isSucsess : <any>null;
        return data;
    }
}

export interface ISpecialWordRespose {
    sw: SpecialWordDto[];
    isSucsess: boolean;
}

export class SpecialWordDto implements ISpecialWordDto {
    id!: number;
    name!: string;
    comment!: string;
    type!: SpecialWordEnum;
    timesUsed!: number;

    constructor(data?: ISpecialWordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.comment = _data["comment"] !== undefined ? _data["comment"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.timesUsed = _data["timesUsed"] !== undefined ? _data["timesUsed"] : <any>null;
        }
    }

    static fromJS(data: any): SpecialWordDto {
        data = typeof data === 'object' ? data : {};
        let result = new SpecialWordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["comment"] = this.comment !== undefined ? this.comment : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["timesUsed"] = this.timesUsed !== undefined ? this.timesUsed : <any>null;
        return data;
    }
}

export interface ISpecialWordDto {
    id: number;
    name: string;
    comment: string;
    type: SpecialWordEnum;
    timesUsed: number;
}

export enum SpecialWordEnum {
    None = 0,
    Delete = 1,
    Timeout = 2,
    Replace = 3,
    Banned = 4,
    AllowedUrl = 5,
    Count = 6,
    Special = 7,
    Keyword = 8,
    Spam = 9,
}

export class StreamRespose implements IStreamRespose {
    streams!: StreamDto[];
    isSucsess!: boolean;

    constructor(data?: IStreamRespose) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.streams = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["streams"])) {
                this.streams = [] as any;
                for (let item of _data["streams"])
                    this.streams!.push(StreamDto.fromJS(item));
            }
            else {
                this.streams = <any>null;
            }
            this.isSucsess = _data["isSucsess"] !== undefined ? _data["isSucsess"] : <any>null;
        }
    }

    static fromJS(data: any): StreamRespose {
        data = typeof data === 'object' ? data : {};
        let result = new StreamRespose();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.streams)) {
            data["streams"] = [];
            for (let item of this.streams)
                data["streams"].push(item.toJSON());
        }
        data["isSucsess"] = this.isSucsess !== undefined ? this.isSucsess : <any>null;
        return data;
    }
}

export interface IStreamRespose {
    streams: StreamDto[];
    isSucsess: boolean;
}

export class StreamDto implements IStreamDto {
    id!: number;
    streamTitle!: string;
    streamStart!: Date;
    streamEnd!: Date;
    gameHistoryDtos!: GameHistoryDto[];

    constructor(data?: IStreamDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.gameHistoryDtos = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.streamTitle = _data["streamTitle"] !== undefined ? _data["streamTitle"] : <any>null;
            this.streamStart = _data["streamStart"] ? new Date(_data["streamStart"].toString()) : <any>null;
            this.streamEnd = _data["streamEnd"] ? new Date(_data["streamEnd"].toString()) : <any>null;
            if (Array.isArray(_data["gameHistoryDtos"])) {
                this.gameHistoryDtos = [] as any;
                for (let item of _data["gameHistoryDtos"])
                    this.gameHistoryDtos!.push(GameHistoryDto.fromJS(item));
            }
            else {
                this.gameHistoryDtos = <any>null;
            }
        }
    }

    static fromJS(data: any): StreamDto {
        data = typeof data === 'object' ? data : {};
        let result = new StreamDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["streamTitle"] = this.streamTitle !== undefined ? this.streamTitle : <any>null;
        data["streamStart"] = this.streamStart ? this.streamStart.toISOString() : <any>null;
        data["streamEnd"] = this.streamEnd ? this.streamEnd.toISOString() : <any>null;
        if (Array.isArray(this.gameHistoryDtos)) {
            data["gameHistoryDtos"] = [];
            for (let item of this.gameHistoryDtos)
                data["gameHistoryDtos"].push(item.toJSON());
        }
        return data;
    }
}

export interface IStreamDto {
    id: number;
    streamTitle: string;
    streamStart: Date;
    streamEnd: Date;
    gameHistoryDtos: GameHistoryDto[];
}

export class GameHistoryDto extends GameInfoDto implements IGameHistoryDto {
    startDate?: Date | null;
    endDate?: Date | null;

    constructor(data?: IGameHistoryDto) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>null;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>null;
        }
    }

    static override fromJS(data: any): GameHistoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GameHistoryDto();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export interface IGameHistoryDto extends IGameInfoDto {
    startDate?: Date | null;
    endDate?: Date | null;
}

export class UserRespose implements IUserRespose {
    users!: UserDto[];
    isSucsess!: boolean;

    constructor(data?: IUserRespose) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.users = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(UserDto.fromJS(item));
            }
            else {
                this.users = <any>null;
            }
            this.isSucsess = _data["isSucsess"] !== undefined ? _data["isSucsess"] : <any>null;
        }
    }

    static fromJS(data: any): UserRespose {
        data = typeof data === 'object' ? data : {};
        let result = new UserRespose();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        data["isSucsess"] = this.isSucsess !== undefined ? this.isSucsess : <any>null;
        return data;
    }
}

export interface IUserRespose {
    users: UserDto[];
    isSucsess: boolean;
}

export class UserDto implements IUserDto {
    id!: number;
    userName!: string;
    url!: string;
    userType!: UserTypeEnum;
    giftedSubsCount!: number;
    giftedBitsCount!: number;
    giftedDonationCount!: number;
    wachedStreams!: number;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.url = _data["url"] !== undefined ? _data["url"] : <any>null;
            this.userType = _data["userType"] !== undefined ? _data["userType"] : <any>null;
            this.giftedSubsCount = _data["giftedSubsCount"] !== undefined ? _data["giftedSubsCount"] : <any>null;
            this.giftedBitsCount = _data["giftedBitsCount"] !== undefined ? _data["giftedBitsCount"] : <any>null;
            this.giftedDonationCount = _data["giftedDonationCount"] !== undefined ? _data["giftedDonationCount"] : <any>null;
            this.wachedStreams = _data["wachedStreams"] !== undefined ? _data["wachedStreams"] : <any>null;
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["url"] = this.url !== undefined ? this.url : <any>null;
        data["userType"] = this.userType !== undefined ? this.userType : <any>null;
        data["giftedSubsCount"] = this.giftedSubsCount !== undefined ? this.giftedSubsCount : <any>null;
        data["giftedBitsCount"] = this.giftedBitsCount !== undefined ? this.giftedBitsCount : <any>null;
        data["giftedDonationCount"] = this.giftedDonationCount !== undefined ? this.giftedDonationCount : <any>null;
        data["wachedStreams"] = this.wachedStreams !== undefined ? this.wachedStreams : <any>null;
        return data;
    }
}

export interface IUserDto {
    id: number;
    userName: string;
    url: string;
    userType: UserTypeEnum;
    giftedSubsCount: number;
    giftedBitsCount: number;
    giftedDonationCount: number;
    wachedStreams: number;
}

export enum UserTypeEnum {
    Streamer = 0,
    Mod = 1,
    Bot = 2,
    Friend = 3,
    VipViewer = 4,
    Clipper = 5,
    Editor = 6,
    Artist = 7,
    Viewer = 8,
}

export class Actions implements IActions {
    id!: string;
    name!: string;

    constructor(data?: IActions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): Actions {
        data = typeof data === 'object' ? data : {};
        let result = new Actions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data;
    }
}

export interface IActions {
    id: string;
    name: string;
}

export class CacheResponse implements ICacheResponse {
    messages!: MessageDto[];
    subs!: SubDto[];
    alerts!: AlertDto[];
    raids!: RaidDto[];
    emotes!: EmoteDto[];

    constructor(data?: ICacheResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.messages = [];
            this.subs = [];
            this.alerts = [];
            this.raids = [];
            this.emotes = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(MessageDto.fromJS(item));
            }
            else {
                this.messages = <any>null;
            }
            if (Array.isArray(_data["subs"])) {
                this.subs = [] as any;
                for (let item of _data["subs"])
                    this.subs!.push(SubDto.fromJS(item));
            }
            else {
                this.subs = <any>null;
            }
            if (Array.isArray(_data["alerts"])) {
                this.alerts = [] as any;
                for (let item of _data["alerts"])
                    this.alerts!.push(AlertDto.fromJS(item));
            }
            else {
                this.alerts = <any>null;
            }
            if (Array.isArray(_data["raids"])) {
                this.raids = [] as any;
                for (let item of _data["raids"])
                    this.raids!.push(RaidDto.fromJS(item));
            }
            else {
                this.raids = <any>null;
            }
            if (Array.isArray(_data["emotes"])) {
                this.emotes = [] as any;
                for (let item of _data["emotes"])
                    this.emotes!.push(EmoteDto.fromJS(item));
            }
            else {
                this.emotes = <any>null;
            }
        }
    }

    static fromJS(data: any): CacheResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CacheResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        if (Array.isArray(this.subs)) {
            data["subs"] = [];
            for (let item of this.subs)
                data["subs"].push(item.toJSON());
        }
        if (Array.isArray(this.alerts)) {
            data["alerts"] = [];
            for (let item of this.alerts)
                data["alerts"].push(item.toJSON());
        }
        if (Array.isArray(this.raids)) {
            data["raids"] = [];
            for (let item of this.raids)
                data["raids"].push(item.toJSON());
        }
        if (Array.isArray(this.emotes)) {
            data["emotes"] = [];
            for (let item of this.emotes)
                data["emotes"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICacheResponse {
    messages: MessageDto[];
    subs: SubDto[];
    alerts: AlertDto[];
    raids: RaidDto[];
    emotes: EmoteDto[];
}

export class TwitchBase implements ITwitchBase {
    messageId!: string;
    userId!: string;
    userName!: string;
    date!: Date;

    constructor(data?: ITwitchBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.messageId = _data["messageId"] !== undefined ? _data["messageId"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): TwitchBase {
        data = typeof data === 'object' ? data : {};
        let result = new TwitchBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["messageId"] = this.messageId !== undefined ? this.messageId : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["date"] = this.date ? this.date.toISOString() : <any>null;
        return data;
    }
}

export interface ITwitchBase {
    messageId: string;
    userId: string;
    userName: string;
    date: Date;
}

export class MessageDto extends TwitchBase implements IMessageDto {
    isCommand!: boolean;
    channel!: string;
    colorHex!: string;
    replayMessage?: string | null;
    message!: string;
    emoteReplacedMessage!: string;
    emotes!: EmoteSet[];
    badges?: KeyValuePairOfStringAndString[] | null;
    chatOrigin!: ChatOriginEnum;
    auth!: AuthEnum[];
    specialMessage!: SpecialMessgeEnum[];
    effect!: EffectEnum;
    isSub!: boolean;
    subCount!: number;
    isUsed!: boolean;

    constructor(data?: IMessageDto) {
        super(data);
        if (!data) {
            this.emotes = [];
            this.auth = [];
            this.specialMessage = [];
        }
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.isCommand = _data["isCommand"] !== undefined ? _data["isCommand"] : <any>null;
            this.channel = _data["channel"] !== undefined ? _data["channel"] : <any>null;
            this.colorHex = _data["colorHex"] !== undefined ? _data["colorHex"] : <any>null;
            this.replayMessage = _data["replayMessage"] !== undefined ? _data["replayMessage"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.emoteReplacedMessage = _data["emoteReplacedMessage"] !== undefined ? _data["emoteReplacedMessage"] : <any>null;
            if (Array.isArray(_data["emotes"])) {
                this.emotes = [] as any;
                for (let item of _data["emotes"])
                    this.emotes!.push(EmoteSet.fromJS(item));
            }
            else {
                this.emotes = <any>null;
            }
            if (Array.isArray(_data["badges"])) {
                this.badges = [] as any;
                for (let item of _data["badges"])
                    this.badges!.push(KeyValuePairOfStringAndString.fromJS(item));
            }
            else {
                this.badges = <any>null;
            }
            this.chatOrigin = _data["chatOrigin"] !== undefined ? _data["chatOrigin"] : <any>null;
            if (Array.isArray(_data["auth"])) {
                this.auth = [] as any;
                for (let item of _data["auth"])
                    this.auth!.push(item);
            }
            else {
                this.auth = <any>null;
            }
            if (Array.isArray(_data["specialMessage"])) {
                this.specialMessage = [] as any;
                for (let item of _data["specialMessage"])
                    this.specialMessage!.push(item);
            }
            else {
                this.specialMessage = <any>null;
            }
            this.effect = _data["effect"] !== undefined ? _data["effect"] : <any>null;
            this.isSub = _data["isSub"] !== undefined ? _data["isSub"] : <any>null;
            this.subCount = _data["subCount"] !== undefined ? _data["subCount"] : <any>null;
            this.isUsed = _data["isUsed"] !== undefined ? _data["isUsed"] : <any>null;
        }
    }

    static override fromJS(data: any): MessageDto {
        data = typeof data === 'object' ? data : {};
        let result = new MessageDto();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isCommand"] = this.isCommand !== undefined ? this.isCommand : <any>null;
        data["channel"] = this.channel !== undefined ? this.channel : <any>null;
        data["colorHex"] = this.colorHex !== undefined ? this.colorHex : <any>null;
        data["replayMessage"] = this.replayMessage !== undefined ? this.replayMessage : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["emoteReplacedMessage"] = this.emoteReplacedMessage !== undefined ? this.emoteReplacedMessage : <any>null;
        if (Array.isArray(this.emotes)) {
            data["emotes"] = [];
            for (let item of this.emotes)
                data["emotes"].push(item.toJSON());
        }
        if (Array.isArray(this.badges)) {
            data["badges"] = [];
            for (let item of this.badges)
                data["badges"].push(item.toJSON());
        }
        data["chatOrigin"] = this.chatOrigin !== undefined ? this.chatOrigin : <any>null;
        if (Array.isArray(this.auth)) {
            data["auth"] = [];
            for (let item of this.auth)
                data["auth"].push(item);
        }
        if (Array.isArray(this.specialMessage)) {
            data["specialMessage"] = [];
            for (let item of this.specialMessage)
                data["specialMessage"].push(item);
        }
        data["effect"] = this.effect !== undefined ? this.effect : <any>null;
        data["isSub"] = this.isSub !== undefined ? this.isSub : <any>null;
        data["subCount"] = this.subCount !== undefined ? this.subCount : <any>null;
        data["isUsed"] = this.isUsed !== undefined ? this.isUsed : <any>null;
        super.toJSON(data);
        return data;
    }
}

export interface IMessageDto extends ITwitchBase {
    isCommand: boolean;
    channel: string;
    colorHex: string;
    replayMessage?: string | null;
    message: string;
    emoteReplacedMessage: string;
    emotes: EmoteSet[];
    badges?: KeyValuePairOfStringAndString[] | null;
    chatOrigin: ChatOriginEnum;
    auth: AuthEnum[];
    specialMessage: SpecialMessgeEnum[];
    effect: EffectEnum;
    isSub: boolean;
    subCount: number;
    isUsed: boolean;
}

export class EmoteSet implements IEmoteSet {
    name!: string;
    animatedURL!: string;
    staticURL!: string;

    constructor(data?: IEmoteSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.animatedURL = _data["animatedURL"] !== undefined ? _data["animatedURL"] : <any>null;
            this.staticURL = _data["staticURL"] !== undefined ? _data["staticURL"] : <any>null;
        }
    }

    static fromJS(data: any): EmoteSet {
        data = typeof data === 'object' ? data : {};
        let result = new EmoteSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["animatedURL"] = this.animatedURL !== undefined ? this.animatedURL : <any>null;
        data["staticURL"] = this.staticURL !== undefined ? this.staticURL : <any>null;
        return data;
    }
}

export interface IEmoteSet {
    name: string;
    animatedURL: string;
    staticURL: string;
}

export class KeyValuePairOfStringAndString implements IKeyValuePairOfStringAndString {
    key?: string | null;
    value?: string | null;

    constructor(data?: IKeyValuePairOfStringAndString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"] !== undefined ? _data["key"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
        }
    }

    static fromJS(data: any): KeyValuePairOfStringAndString {
        data = typeof data === 'object' ? data : {};
        let result = new KeyValuePairOfStringAndString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key !== undefined ? this.key : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data;
    }
}

export interface IKeyValuePairOfStringAndString {
    key?: string | null;
    value?: string | null;
}

export enum SpecialMessgeEnum {
    Undefined = 0,
    FirstMessage = 1,
    Highlighted = 2,
    SkippSubMode = 3,
    SubMessage = 4,
    FirstStreamMessage = 5,
    RaidMessage = 6,
}

export enum EffectEnum {
    None = 0,
    Flip = 1,
    Rainbow = 2,
    Revert = 3,
    Bounce = 4,
    Shake = 5,
    Wave = 6,
    Wiggle = 7,
    Randamise = 8,
    Translatehell = 9,
    Gigantify = 10,
}

export class SubDto extends TwitchBase implements ISubDto {
    isGifftedSub!: boolean;
    gifftedSubCount!: number;
    currentTier!: TierEnum;
    chatMessage?: MessageDto | null;
    isUsed!: boolean;

    constructor(data?: ISubDto) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.isGifftedSub = _data["isGifftedSub"] !== undefined ? _data["isGifftedSub"] : <any>null;
            this.gifftedSubCount = _data["gifftedSubCount"] !== undefined ? _data["gifftedSubCount"] : <any>null;
            this.currentTier = _data["currentTier"] !== undefined ? _data["currentTier"] : <any>null;
            this.chatMessage = _data["chatMessage"] ? MessageDto.fromJS(_data["chatMessage"]) : <any>null;
            this.isUsed = _data["isUsed"] !== undefined ? _data["isUsed"] : <any>null;
        }
    }

    static override fromJS(data: any): SubDto {
        data = typeof data === 'object' ? data : {};
        let result = new SubDto();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isGifftedSub"] = this.isGifftedSub !== undefined ? this.isGifftedSub : <any>null;
        data["gifftedSubCount"] = this.gifftedSubCount !== undefined ? this.gifftedSubCount : <any>null;
        data["currentTier"] = this.currentTier !== undefined ? this.currentTier : <any>null;
        data["chatMessage"] = this.chatMessage ? this.chatMessage.toJSON() : <any>null;
        data["isUsed"] = this.isUsed !== undefined ? this.isUsed : <any>null;
        super.toJSON(data);
        return data;
    }
}

export interface ISubDto extends ITwitchBase {
    isGifftedSub: boolean;
    gifftedSubCount: number;
    currentTier: TierEnum;
    chatMessage?: MessageDto | null;
    isUsed: boolean;
}

export enum TierEnum {
    None = 0,
    Megabyte = 1,
    Gigabyte = 2,
    Terabyte = 3,
    NotSet = 4,
    Prime = 5,
    Tier1 = 6,
    Tier2 = 7,
    Tier3 = 8,
}

export class AlertDto implements IAlertDto {
    volume!: number;
    image?: string | null;
    sound?: string | null;
    video?: string | null;
    html!: string;
    videoLeght!: number;
    isMute!: boolean;
    duration!: number;
    isSameTime!: boolean;

    constructor(data?: IAlertDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.volume = _data["volume"] !== undefined ? _data["volume"] : <any>null;
            this.image = _data["image"] !== undefined ? _data["image"] : <any>null;
            this.sound = _data["sound"] !== undefined ? _data["sound"] : <any>null;
            this.video = _data["video"] !== undefined ? _data["video"] : <any>null;
            this.html = _data["html"] !== undefined ? _data["html"] : <any>null;
            this.videoLeght = _data["videoLeght"] !== undefined ? _data["videoLeght"] : <any>null;
            this.isMute = _data["isMute"] !== undefined ? _data["isMute"] : <any>null;
            this.duration = _data["duration"] !== undefined ? _data["duration"] : <any>null;
            this.isSameTime = _data["isSameTime"] !== undefined ? _data["isSameTime"] : <any>null;
        }
    }

    static fromJS(data: any): AlertDto {
        data = typeof data === 'object' ? data : {};
        let result = new AlertDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["volume"] = this.volume !== undefined ? this.volume : <any>null;
        data["image"] = this.image !== undefined ? this.image : <any>null;
        data["sound"] = this.sound !== undefined ? this.sound : <any>null;
        data["video"] = this.video !== undefined ? this.video : <any>null;
        data["html"] = this.html !== undefined ? this.html : <any>null;
        data["videoLeght"] = this.videoLeght !== undefined ? this.videoLeght : <any>null;
        data["isMute"] = this.isMute !== undefined ? this.isMute : <any>null;
        data["duration"] = this.duration !== undefined ? this.duration : <any>null;
        data["isSameTime"] = this.isSameTime !== undefined ? this.isSameTime : <any>null;
        return data;
    }
}

export interface IAlertDto {
    volume: number;
    image?: string | null;
    sound?: string | null;
    video?: string | null;
    html: string;
    videoLeght: number;
    isMute: boolean;
    duration: number;
    isSameTime: boolean;
}

export class RaidDto implements IRaidDto {
    count!: number;
    game!: string;
    userName!: string;
    utcNow!: Date;
    isUsed!: boolean;

    constructor(data?: IRaidDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"] !== undefined ? _data["count"] : <any>null;
            this.game = _data["game"] !== undefined ? _data["game"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.utcNow = _data["utcNow"] ? new Date(_data["utcNow"].toString()) : <any>null;
            this.isUsed = _data["isUsed"] !== undefined ? _data["isUsed"] : <any>null;
        }
    }

    static fromJS(data: any): RaidDto {
        data = typeof data === 'object' ? data : {};
        let result = new RaidDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count !== undefined ? this.count : <any>null;
        data["game"] = this.game !== undefined ? this.game : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["utcNow"] = this.utcNow ? this.utcNow.toISOString() : <any>null;
        data["isUsed"] = this.isUsed !== undefined ? this.isUsed : <any>null;
        return data;
    }
}

export interface IRaidDto {
    count: number;
    game: string;
    userName: string;
    utcNow: Date;
    isUsed: boolean;
}

export class EmoteDto implements IEmoteDto {
    id!: string;
    provider!: EmoteProviderEnum;
    name!: string;
    url!: string;

    constructor(data?: IEmoteDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.provider = _data["provider"] !== undefined ? _data["provider"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.url = _data["url"] !== undefined ? _data["url"] : <any>null;
        }
    }

    static fromJS(data: any): EmoteDto {
        data = typeof data === 'object' ? data : {};
        let result = new EmoteDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["provider"] = this.provider !== undefined ? this.provider : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["url"] = this.url !== undefined ? this.url : <any>null;
        return data;
    }
}

export interface IEmoteDto {
    id: string;
    provider: EmoteProviderEnum;
    name: string;
    url: string;
}

export enum EmoteProviderEnum {
    Twitch = 0,
    _7TV = 1,
    BetterTTV = 2,
    FrankerFaceZ = 3,
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}