//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class CommandClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAllCommands(): Observable<CommandRespose> {
        let url_ = this.baseUrl + "/api/Command";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllCommands(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllCommands(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CommandRespose>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CommandRespose>;
        }));
    }

    protected processGetAllCommands(response: HttpResponseBase): Observable<CommandRespose> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CommandRespose.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateCommands(commandAndResponses: CommandAndResponseDto[]): Observable<CommandRespose> {
        let url_ = this.baseUrl + "/api/Command";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(commandAndResponses);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateCommands(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateCommands(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CommandRespose>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CommandRespose>;
        }));
    }

    protected processUpdateCommands(response: HttpResponseBase): Observable<CommandRespose> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CommandRespose.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteCommands(commandAndResponses: CommandAndResponseDto[]): Observable<CommandRespose> {
        let url_ = this.baseUrl + "/api/Command";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(commandAndResponses);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteCommands(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteCommands(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CommandRespose>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CommandRespose>;
        }));
    }

    protected processDeleteCommands(response: HttpResponseBase): Observable<CommandRespose> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CommandRespose.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class SpecialWordClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAllspecialWords(): Observable<SpecialWordRespose> {
        let url_ = this.baseUrl + "/api/SpecialWord";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllspecialWords(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllspecialWords(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SpecialWordRespose>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SpecialWordRespose>;
        }));
    }

    protected processGetAllspecialWords(response: HttpResponseBase): Observable<SpecialWordRespose> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SpecialWordRespose.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updatespecialWords(commandAndResponses: SpecialWordDto[]): Observable<SpecialWordRespose> {
        let url_ = this.baseUrl + "/api/SpecialWord";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(commandAndResponses);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdatespecialWords(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdatespecialWords(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SpecialWordRespose>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SpecialWordRespose>;
        }));
    }

    protected processUpdatespecialWords(response: HttpResponseBase): Observable<SpecialWordRespose> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SpecialWordRespose.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deletespecialWords(commandAndResponses: SpecialWordDto[]): Observable<SpecialWordRespose> {
        let url_ = this.baseUrl + "/api/SpecialWord";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(commandAndResponses);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeletespecialWords(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeletespecialWords(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SpecialWordRespose>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SpecialWordRespose>;
        }));
    }

    protected processDeletespecialWords(response: HttpResponseBase): Observable<SpecialWordRespose> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SpecialWordRespose.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class TestClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    testLogic(): Observable<void> {
        let url_ = this.baseUrl + "/api/Test";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTestLogic(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTestLogic(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processTestLogic(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class TwitchClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    startTwitchRequest(): Observable<void> {
        let url_ = this.baseUrl + "/api/Twitch";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processStartTwitchRequest(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processStartTwitchRequest(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processStartTwitchRequest(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    addDBData(): Observable<void> {
        let url_ = this.baseUrl + "/api/Twitch";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddDBData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddDBData(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAddDBData(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getTwitchChatData(): Observable<ChatDto[]> {
        let url_ = this.baseUrl + "/api/Twitch";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTwitchChatData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTwitchChatData(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ChatDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ChatDto[]>;
        }));
    }

    protected processGetTwitchChatData(response: HttpResponseBase): Observable<ChatDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ChatDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class CommandRespose implements ICommandRespose {
    cads!: CommandAndResponseDto[];
    isSucsess!: boolean;

    constructor(data?: ICommandRespose) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.cads = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["cads"])) {
                this.cads = [] as any;
                for (let item of _data["cads"])
                    this.cads!.push(CommandAndResponseDto.fromJS(item));
            }
            else {
                this.cads = <any>null;
            }
            this.isSucsess = _data["isSucsess"] !== undefined ? _data["isSucsess"] : <any>null;
        }
    }

    static fromJS(data: any): CommandRespose {
        data = typeof data === 'object' ? data : {};
        let result = new CommandRespose();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.cads)) {
            data["cads"] = [];
            for (let item of this.cads)
                data["cads"].push(item.toJSON());
        }
        data["isSucsess"] = this.isSucsess !== undefined ? this.isSucsess : <any>null;
        return data;
    }
}

export interface ICommandRespose {
    cads: CommandAndResponseDto[];
    isSucsess: boolean;
}

export class CommandAndResponseDto implements ICommandAndResponseDto {
    id!: number;
    command!: string;
    response!: string;
    description!: string;
    active!: boolean;
    auth!: AuthEnum;
    category!: CategoryEnum;

    constructor(data?: ICommandAndResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.command = _data["command"] !== undefined ? _data["command"] : <any>null;
            this.response = _data["response"] !== undefined ? _data["response"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.active = _data["active"] !== undefined ? _data["active"] : <any>null;
            this.auth = _data["auth"] !== undefined ? _data["auth"] : <any>null;
            this.category = _data["category"] !== undefined ? _data["category"] : <any>null;
        }
    }

    static fromJS(data: any): CommandAndResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new CommandAndResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["command"] = this.command !== undefined ? this.command : <any>null;
        data["response"] = this.response !== undefined ? this.response : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["active"] = this.active !== undefined ? this.active : <any>null;
        data["auth"] = this.auth !== undefined ? this.auth : <any>null;
        data["category"] = this.category !== undefined ? this.category : <any>null;
        return data;
    }
}

export interface ICommandAndResponseDto {
    id: number;
    command: string;
    response: string;
    description: string;
    active: boolean;
    auth: AuthEnum;
    category: CategoryEnum;
}

export enum AuthEnum {
    Streamer = 1,
    Mod = 2,
    Staff = 3,
    Vip = 4,
    Partner = 5,
    Subscriber = 6,
    Prime = 7,
    Turbo = 8,
    Undefined = 9,
}

export enum CategoryEnum {
    Undefined = 0,
    Queue = 1,
    Game = 2,
    Song = 3,
    Streamupdate = 4,
    Fun = 5,
    Subathon = 6,
    Logic = 7,
    Basic = 8,
}

export class SpecialWordRespose implements ISpecialWordRespose {
    sw!: SpecialWordDto[];
    isSucsess!: boolean;

    constructor(data?: ISpecialWordRespose) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.sw = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["sw"])) {
                this.sw = [] as any;
                for (let item of _data["sw"])
                    this.sw!.push(SpecialWordDto.fromJS(item));
            }
            else {
                this.sw = <any>null;
            }
            this.isSucsess = _data["isSucsess"] !== undefined ? _data["isSucsess"] : <any>null;
        }
    }

    static fromJS(data: any): SpecialWordRespose {
        data = typeof data === 'object' ? data : {};
        let result = new SpecialWordRespose();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.sw)) {
            data["sw"] = [];
            for (let item of this.sw)
                data["sw"].push(item.toJSON());
        }
        data["isSucsess"] = this.isSucsess !== undefined ? this.isSucsess : <any>null;
        return data;
    }
}

export interface ISpecialWordRespose {
    sw: SpecialWordDto[];
    isSucsess: boolean;
}

export class SpecialWordDto implements ISpecialWordDto {
    id!: number;
    name!: string;
    comment!: string;
    type!: SpecialWordEnum;
    timesUsed!: number;

    constructor(data?: ISpecialWordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.comment = _data["comment"] !== undefined ? _data["comment"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.timesUsed = _data["timesUsed"] !== undefined ? _data["timesUsed"] : <any>null;
        }
    }

    static fromJS(data: any): SpecialWordDto {
        data = typeof data === 'object' ? data : {};
        let result = new SpecialWordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["comment"] = this.comment !== undefined ? this.comment : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["timesUsed"] = this.timesUsed !== undefined ? this.timesUsed : <any>null;
        return data;
    }
}

export interface ISpecialWordDto {
    id: number;
    name: string;
    comment: string;
    type: SpecialWordEnum;
    timesUsed: number;
}

export enum SpecialWordEnum {
    None = 0,
    Delete = 1,
    Timeout = 2,
    Banned = 3,
    Allowed = 4,
    Count = 5,
    Special = 6,
    Keyword = 7,
    Spam = 8,
}

export class ChatDto implements IChatDto {
    id!: string;
    userName!: string;
    colorHex!: string;
    replayMessage!: string;
    message!: string;
    emoteReplacedMessage!: string;
    emoteSet?: EmoteSet | null;
    badges?: KeyValuePairOfStringAndString[] | null;
    chatOrigin!: ChatOriginEnum;
    chatDisplay!: ChatDisplayEnum;
    auth!: AuthEnum[];
    specialMessage!: SpecialMessgeEnum[];
    effect!: EffectEnum;
    date!: Date;

    constructor(data?: IChatDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.auth = [];
            this.specialMessage = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.colorHex = _data["colorHex"] !== undefined ? _data["colorHex"] : <any>null;
            this.replayMessage = _data["replayMessage"] !== undefined ? _data["replayMessage"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.emoteReplacedMessage = _data["emoteReplacedMessage"] !== undefined ? _data["emoteReplacedMessage"] : <any>null;
            this.emoteSet = _data["emoteSet"] ? EmoteSet.fromJS(_data["emoteSet"]) : <any>null;
            if (Array.isArray(_data["badges"])) {
                this.badges = [] as any;
                for (let item of _data["badges"])
                    this.badges!.push(KeyValuePairOfStringAndString.fromJS(item));
            }
            else {
                this.badges = <any>null;
            }
            this.chatOrigin = _data["chatOrigin"] !== undefined ? _data["chatOrigin"] : <any>null;
            this.chatDisplay = _data["chatDisplay"] !== undefined ? _data["chatDisplay"] : <any>null;
            if (Array.isArray(_data["auth"])) {
                this.auth = [] as any;
                for (let item of _data["auth"])
                    this.auth!.push(item);
            }
            else {
                this.auth = <any>null;
            }
            if (Array.isArray(_data["specialMessage"])) {
                this.specialMessage = [] as any;
                for (let item of _data["specialMessage"])
                    this.specialMessage!.push(item);
            }
            else {
                this.specialMessage = <any>null;
            }
            this.effect = _data["effect"] !== undefined ? _data["effect"] : <any>null;
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): ChatDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChatDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["colorHex"] = this.colorHex !== undefined ? this.colorHex : <any>null;
        data["replayMessage"] = this.replayMessage !== undefined ? this.replayMessage : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["emoteReplacedMessage"] = this.emoteReplacedMessage !== undefined ? this.emoteReplacedMessage : <any>null;
        data["emoteSet"] = this.emoteSet ? this.emoteSet.toJSON() : <any>null;
        if (Array.isArray(this.badges)) {
            data["badges"] = [];
            for (let item of this.badges)
                data["badges"].push(item.toJSON());
        }
        data["chatOrigin"] = this.chatOrigin !== undefined ? this.chatOrigin : <any>null;
        data["chatDisplay"] = this.chatDisplay !== undefined ? this.chatDisplay : <any>null;
        if (Array.isArray(this.auth)) {
            data["auth"] = [];
            for (let item of this.auth)
                data["auth"].push(item);
        }
        if (Array.isArray(this.specialMessage)) {
            data["specialMessage"] = [];
            for (let item of this.specialMessage)
                data["specialMessage"].push(item);
        }
        data["effect"] = this.effect !== undefined ? this.effect : <any>null;
        data["date"] = this.date ? this.date.toISOString() : <any>null;
        return data;
    }
}

export interface IChatDto {
    id: string;
    userName: string;
    colorHex: string;
    replayMessage: string;
    message: string;
    emoteReplacedMessage: string;
    emoteSet?: EmoteSet | null;
    badges?: KeyValuePairOfStringAndString[] | null;
    chatOrigin: ChatOriginEnum;
    chatDisplay: ChatDisplayEnum;
    auth: AuthEnum[];
    specialMessage: SpecialMessgeEnum[];
    effect: EffectEnum;
    date: Date;
}

/** Object representing emote set from a chat message. */
export class EmoteSet implements IEmoteSet {
    /** List containing all emotes in the message. */
    emotes?: Emote[] | null;
    /** The raw emote set string obtained from Twitch, for legacy purposes. */
    rawEmoteSetString?: string | null;

    constructor(data?: IEmoteSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["emotes"])) {
                this.emotes = [] as any;
                for (let item of _data["emotes"])
                    this.emotes!.push(Emote.fromJS(item));
            }
            else {
                this.emotes = <any>null;
            }
            this.rawEmoteSetString = _data["rawEmoteSetString"] !== undefined ? _data["rawEmoteSetString"] : <any>null;
        }
    }

    static fromJS(data: any): EmoteSet {
        data = typeof data === 'object' ? data : {};
        let result = new EmoteSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.emotes)) {
            data["emotes"] = [];
            for (let item of this.emotes)
                data["emotes"].push(item.toJSON());
        }
        data["rawEmoteSetString"] = this.rawEmoteSetString !== undefined ? this.rawEmoteSetString : <any>null;
        return data;
    }
}

/** Object representing emote set from a chat message. */
export interface IEmoteSet {
    /** List containing all emotes in the message. */
    emotes?: Emote[] | null;
    /** The raw emote set string obtained from Twitch, for legacy purposes. */
    rawEmoteSetString?: string | null;
}

/** Object representing an emote in an EmoteSet in a chat message. */
export class Emote implements IEmote {
    /** Twitch-assigned emote Id. */
    id?: string | null;
    /** The name of the emote. For example, if the message was "This is Kappa test.", the name would be 'Kappa'. */
    name?: string | null;
    /** Character starting index. For example, if the message was "This is Kappa test.", the start index would be 8 for 'Kappa'. */
    startIndex!: number;
    /** Character ending index. For example, if the message was "This is Kappa test.", the start index would be 12 for 'Kappa'. */
    endIndex!: number;
    /** URL to Twitch hosted emote image. */
    imageUrl?: string | null;

    constructor(data?: IEmote) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.startIndex = _data["startIndex"] !== undefined ? _data["startIndex"] : <any>null;
            this.endIndex = _data["endIndex"] !== undefined ? _data["endIndex"] : <any>null;
            this.imageUrl = _data["imageUrl"] !== undefined ? _data["imageUrl"] : <any>null;
        }
    }

    static fromJS(data: any): Emote {
        data = typeof data === 'object' ? data : {};
        let result = new Emote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["startIndex"] = this.startIndex !== undefined ? this.startIndex : <any>null;
        data["endIndex"] = this.endIndex !== undefined ? this.endIndex : <any>null;
        data["imageUrl"] = this.imageUrl !== undefined ? this.imageUrl : <any>null;
        return data;
    }
}

/** Object representing an emote in an EmoteSet in a chat message. */
export interface IEmote {
    /** Twitch-assigned emote Id. */
    id?: string | null;
    /** The name of the emote. For example, if the message was "This is Kappa test.", the name would be 'Kappa'. */
    name?: string | null;
    /** Character starting index. For example, if the message was "This is Kappa test.", the start index would be 8 for 'Kappa'. */
    startIndex: number;
    /** Character ending index. For example, if the message was "This is Kappa test.", the start index would be 12 for 'Kappa'. */
    endIndex: number;
    /** URL to Twitch hosted emote image. */
    imageUrl?: string | null;
}

export class KeyValuePairOfStringAndString implements IKeyValuePairOfStringAndString {
    key?: string | null;
    value?: string | null;

    constructor(data?: IKeyValuePairOfStringAndString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"] !== undefined ? _data["key"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
        }
    }

    static fromJS(data: any): KeyValuePairOfStringAndString {
        data = typeof data === 'object' ? data : {};
        let result = new KeyValuePairOfStringAndString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key !== undefined ? this.key : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data;
    }
}

export interface IKeyValuePairOfStringAndString {
    key?: string | null;
    value?: string | null;
}

export enum ChatOriginEnum {
    Twtich = 0,
    Youtube = 1,
    Undefined = 2,
}

export enum ChatDisplayEnum {
    AllChat = 0,
    TwitchChat = 1,
    YoutubeChat = 2,
    ModChat = 3,
    FriendChat = 4,
    Events = 5,
    ModEvents = 6,
}

export enum SpecialMessgeEnum {
    Undefined = 0,
    FirstMessage = 1,
    Highlighted = 2,
    SkippSubMode = 3,
    SubMessage = 4,
    FirstStreamMessage = 5,
    RaidMessage = 6,
}

export enum EffectEnum {
    None = 0,
    Flip = 1,
    Rainbow = 2,
    Revert = 3,
    Bounce = 4,
    Shake = 5,
    Wave = 6,
    Wiggle = 7,
    Randamise = 8,
    Translatehell = 9,
    Gigantify = 10,
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}