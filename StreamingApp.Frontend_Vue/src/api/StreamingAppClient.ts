//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

import BaseClient from "./Baseclient";

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class TwitchClient extends BaseClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    startTwitchRequest(): Promise<void> {
        let url_ = this.baseUrl + "/api/Twitch";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PUT",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processStartTwitchRequest(_response);
        });
    }

    protected processStartTwitchRequest(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getTwitchChatData(): Promise<ChatDto[]> {
        let url_ = this.baseUrl + "/api/Twitch";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetTwitchChatData(_response);
        });
    }

    protected processGetTwitchChatData(response: Response): Promise<ChatDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ChatDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ChatDto[]>(null as any);
    }
}

export class ChatDto implements IChatDto {
    userName!: string;
    colorHex!: string;
    message!: string;
    emoteReplacedMessage!: string;
    emoteSet!: EmoteSet;
    badges!: KeyValuePairOfStringAndString[];
    auth!: ChatUserEnum[];
    specialMessage!: SpecialMessgeEnum[];
    date!: Date;

    constructor(data?: IChatDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.emoteSet = new EmoteSet();
            this.badges = [];
            this.auth = [];
            this.specialMessage = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.colorHex = _data["colorHex"];
            this.message = _data["message"];
            this.emoteReplacedMessage = _data["emoteReplacedMessage"];
            this.emoteSet = _data["emoteSet"] ? EmoteSet.fromJS(_data["emoteSet"]) : new EmoteSet();
            if (Array.isArray(_data["badges"])) {
                this.badges = [] as any;
                for (let item of _data["badges"])
                    this.badges!.push(KeyValuePairOfStringAndString.fromJS(item));
            }
            if (Array.isArray(_data["auth"])) {
                this.auth = [] as any;
                for (let item of _data["auth"])
                    this.auth!.push(item);
            }
            if (Array.isArray(_data["specialMessage"])) {
                this.specialMessage = [] as any;
                for (let item of _data["specialMessage"])
                    this.specialMessage!.push(item);
            }
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ChatDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChatDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["colorHex"] = this.colorHex;
        data["message"] = this.message;
        data["emoteReplacedMessage"] = this.emoteReplacedMessage;
        data["emoteSet"] = this.emoteSet ? this.emoteSet.toJSON() : <any>undefined;
        if (Array.isArray(this.badges)) {
            data["badges"] = [];
            for (let item of this.badges)
                data["badges"].push(item.toJSON());
        }
        if (Array.isArray(this.auth)) {
            data["auth"] = [];
            for (let item of this.auth)
                data["auth"].push(item);
        }
        if (Array.isArray(this.specialMessage)) {
            data["specialMessage"] = [];
            for (let item of this.specialMessage)
                data["specialMessage"].push(item);
        }
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        return data;
    }
}

export interface IChatDto {
    userName: string;
    colorHex: string;
    message: string;
    emoteReplacedMessage: string;
    emoteSet: EmoteSet;
    badges: KeyValuePairOfStringAndString[];
    auth: ChatUserEnum[];
    specialMessage: SpecialMessgeEnum[];
    date: Date;
}

/** Object representing emote set from a chat message. */
export class EmoteSet implements IEmoteSet {
    /** List containing all emotes in the message. */
    emotes?: Emote[] | undefined;
    /** The raw emote set string obtained from Twitch, for legacy purposes. */
    rawEmoteSetString?: string | undefined;

    constructor(data?: IEmoteSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["emotes"])) {
                this.emotes = [] as any;
                for (let item of _data["emotes"])
                    this.emotes!.push(Emote.fromJS(item));
            }
            this.rawEmoteSetString = _data["rawEmoteSetString"];
        }
    }

    static fromJS(data: any): EmoteSet {
        data = typeof data === 'object' ? data : {};
        let result = new EmoteSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.emotes)) {
            data["emotes"] = [];
            for (let item of this.emotes)
                data["emotes"].push(item.toJSON());
        }
        data["rawEmoteSetString"] = this.rawEmoteSetString;
        return data;
    }
}

/** Object representing emote set from a chat message. */
export interface IEmoteSet {
    /** List containing all emotes in the message. */
    emotes?: Emote[] | undefined;
    /** The raw emote set string obtained from Twitch, for legacy purposes. */
    rawEmoteSetString?: string | undefined;
}

/** Object representing an emote in an EmoteSet in a chat message. */
export class Emote implements IEmote {
    /** Twitch-assigned emote Id. */
    id?: string | undefined;
    /** The name of the emote. For example, if the message was "This is Kappa test.", the name would be 'Kappa'. */
    name?: string | undefined;
    /** Character starting index. For example, if the message was "This is Kappa test.", the start index would be 8 for 'Kappa'. */
    startIndex!: number;
    /** Character ending index. For example, if the message was "This is Kappa test.", the start index would be 12 for 'Kappa'. */
    endIndex!: number;
    /** URL to Twitch hosted emote image. */
    imageUrl?: string | undefined;

    constructor(data?: IEmote) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.startIndex = _data["startIndex"];
            this.endIndex = _data["endIndex"];
            this.imageUrl = _data["imageUrl"];
        }
    }

    static fromJS(data: any): Emote {
        data = typeof data === 'object' ? data : {};
        let result = new Emote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["startIndex"] = this.startIndex;
        data["endIndex"] = this.endIndex;
        data["imageUrl"] = this.imageUrl;
        return data;
    }
}

/** Object representing an emote in an EmoteSet in a chat message. */
export interface IEmote {
    /** Twitch-assigned emote Id. */
    id?: string | undefined;
    /** The name of the emote. For example, if the message was "This is Kappa test.", the name would be 'Kappa'. */
    name?: string | undefined;
    /** Character starting index. For example, if the message was "This is Kappa test.", the start index would be 8 for 'Kappa'. */
    startIndex: number;
    /** Character ending index. For example, if the message was "This is Kappa test.", the start index would be 12 for 'Kappa'. */
    endIndex: number;
    /** URL to Twitch hosted emote image. */
    imageUrl?: string | undefined;
}

export class KeyValuePairOfStringAndString implements IKeyValuePairOfStringAndString {
    key!: string;
    value!: string;

    constructor(data?: IKeyValuePairOfStringAndString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): KeyValuePairOfStringAndString {
        data = typeof data === 'object' ? data : {};
        let result = new KeyValuePairOfStringAndString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["value"] = this.value;
        return data;
    }
}

export interface IKeyValuePairOfStringAndString {
    key: string;
    value: string;
}

export enum ChatUserEnum {
    Undefined = 0,
    Streamer = 1,
    Mod = 2,
    Subscriber = 3,
    Vip = 4,
    Turbo = 5,
    Partner = 6,
    Staff = 7,
}

export enum SpecialMessgeEnum {
    Undefined = 0,
    FirstMessage = 1,
    Highlighted = 2,
    SkippSubMode = 3,
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}